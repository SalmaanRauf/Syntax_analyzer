Token           Lexeme         
-----------------------------------
Token: separator       Lexeme: $$              Line: 1
	line 2: <Rat25S> -> $$ <OptFunctionDefinitions> $$ <OptDeclarationList> $$ <StatementList> $$
	line 2: <OptFunctionDefinitions> -> <FunctionDefinitions>
	line 2: <FunctionDefinitions> -> <Function> <FunctionDefinitionsPrime>
	line 2: <Function> -> function IDENTIFIER ( <OptParameterList> ) <OptDeclarationList> <Body>
Token: keyword         Lexeme: function        Line: 2
Token: identifier      Lexeme: max_of_three    Line: 3
Token: separator       Lexeme: (               Line: 3
	line 3: <OptParameterList> -> <ParameterList>
	line 3: <ParameterList> -> <Parameter> <ParameterListPrime>
	line 3: <Parameter> -> <IDs> <Qualifier>
	line 3: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: a               Line: 3
	line 3: <IDsPrime> -> ε
	line 3: <Qualifier> -> integer | boolean | real
Token: keyword         Lexeme: integer         Line: 3
	line 3: <ParameterListPrime> -> , <Parameter> <ParameterListPrime>
Token: separator       Lexeme: ,               Line: 3
	line 3: <Parameter> -> <IDs> <Qualifier>
	line 3: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: b               Line: 3
	line 3: <IDsPrime> -> ε
	line 3: <Qualifier> -> integer | boolean | real
Token: keyword         Lexeme: integer         Line: 3
	line 3: <ParameterListPrime> -> , <Parameter> <ParameterListPrime>
Token: separator       Lexeme: ,               Line: 3
	line 3: <Parameter> -> <IDs> <Qualifier>
	line 3: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: c               Line: 3
	line 3: <IDsPrime> -> ε
	line 3: <Qualifier> -> integer | boolean | real
Token: keyword         Lexeme: integer         Line: 3
	line 3: <ParameterListPrime> -> ε
Token: separator       Lexeme: )               Line: 3
	line 3: <OptDeclarationList> -> <DeclarationList>
	line 3: <DeclarationList> -> <Declaration> ; <DeclarationListPrime>
	line 3: <Declaration> -> <Qualifier> <IDs>
	line 3: <Qualifier> -> integer | boolean | real
Token: keyword         Lexeme: integer         Line: 3
	line 4: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: max             Line: 4
	line 4: <IDsPrime> -> ε
Token: separator       Lexeme: ;               Line: 4
	line 4: <DeclarationListPrime> -> ε
	line 4: <Body> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 4
	line 6: <StatementList> -> <Statement> <StatementListPrime>
	line 6: <Statement> -> <If>
	line 6: <If> -> if ( <Condition> ) <Statement> <IfPrime>
Token: keyword         Lexeme: if              Line: 6
Token: separator       Lexeme: (               Line: 8
	line 8: <Condition> -> <Expression> <Relop> <Expression>
	line 8: <Expression> -> <Term> <ExpressionPrime>
	line 8: <Term> -> <Factor> <TermPrime>
	line 8: <Factor> -> <Primary>
	line 8: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: a               Line: 8
	line 8: <TermPrime> -> ε
	line 8: <ExpressionPrime> -> ε
	line 8: <Relop> -> == | != | > | < | <= | =>
Token: operator        Lexeme: >               Line: 8
	line 8: <Expression> -> <Term> <ExpressionPrime>
	line 8: <Term> -> <Factor> <TermPrime>
	line 8: <Factor> -> <Primary>
	line 8: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: b               Line: 8
	line 8: <TermPrime> -> ε
	line 8: <ExpressionPrime> -> ε
Token: separator       Lexeme: )               Line: 8
	line 8: <Statement> -> <Compound>
	line 8: <Compound> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 8
	line 9: <StatementList> -> <Statement> <StatementListPrime>
	line 9: <Statement> -> <If>
	line 9: <If> -> if ( <Condition> ) <Statement> <IfPrime>
Token: keyword         Lexeme: if              Line: 9
Token: separator       Lexeme: (               Line: 10
	line 10: <Condition> -> <Expression> <Relop> <Expression>
	line 10: <Expression> -> <Term> <ExpressionPrime>
	line 10: <Term> -> <Factor> <TermPrime>
	line 10: <Factor> -> <Primary>
	line 10: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: a               Line: 10
	line 10: <TermPrime> -> ε
	line 10: <ExpressionPrime> -> ε
	line 10: <Relop> -> == | != | > | < | <= | =>
Token: operator        Lexeme: >               Line: 10
	line 10: <Expression> -> <Term> <ExpressionPrime>
	line 10: <Term> -> <Factor> <TermPrime>
	line 10: <Factor> -> <Primary>
	line 10: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: c               Line: 10
	line 10: <TermPrime> -> ε
	line 10: <ExpressionPrime> -> ε
Token: separator       Lexeme: )               Line: 10
	line 10: <Statement> -> <Compound>
	line 10: <Compound> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 10
	line 11: <StatementList> -> <Statement> <StatementListPrime>
	line 11: <Statement> -> <Assign>
	line 11: <Assign> -> IDENTIFIER = <Expression> ;
Token: identifier      Lexeme: max             Line: 11
Token: operator        Lexeme: =               Line: 12
	line 12: <Expression> -> <Term> <ExpressionPrime>
	line 12: <Term> -> <Factor> <TermPrime>
	line 12: <Factor> -> <Primary>
	line 12: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: a               Line: 12
	line 12: <TermPrime> -> ε
	line 12: <ExpressionPrime> -> ε
Token: separator       Lexeme: ;               Line: 12
	line 12: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 12
	line 13: <IfPrime> -> else <Statement> endif
Token: keyword         Lexeme: else            Line: 13
	line 14: <Statement> -> <Compound>
	line 14: <Compound> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 14
	line 15: <StatementList> -> <Statement> <StatementListPrime>
	line 15: <Statement> -> <Assign>
	line 15: <Assign> -> IDENTIFIER = <Expression> ;
Token: identifier      Lexeme: max             Line: 15
Token: operator        Lexeme: =               Line: 16
	line 16: <Expression> -> <Term> <ExpressionPrime>
	line 16: <Term> -> <Factor> <TermPrime>
	line 16: <Factor> -> <Primary>
	line 16: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: c               Line: 16
	line 16: <TermPrime> -> ε
	line 16: <ExpressionPrime> -> ε
Token: separator       Lexeme: ;               Line: 16
	line 16: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 16
Token: keyword         Lexeme: endif           Line: 17
	line 18: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 18
	line 19: <IfPrime> -> else <Statement> endif
Token: keyword         Lexeme: else            Line: 19
	line 20: <Statement> -> <Compound>
	line 20: <Compound> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 20
	line 21: <StatementList> -> <Statement> <StatementListPrime>
	line 21: <Statement> -> <If>
	line 21: <If> -> if ( <Condition> ) <Statement> <IfPrime>
Token: keyword         Lexeme: if              Line: 21
Token: separator       Lexeme: (               Line: 22
	line 22: <Condition> -> <Expression> <Relop> <Expression>
	line 22: <Expression> -> <Term> <ExpressionPrime>
	line 22: <Term> -> <Factor> <TermPrime>
	line 22: <Factor> -> <Primary>
	line 22: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: b               Line: 22
	line 22: <TermPrime> -> ε
	line 22: <ExpressionPrime> -> ε
	line 22: <Relop> -> == | != | > | < | <= | =>
Token: operator        Lexeme: >               Line: 22
	line 22: <Expression> -> <Term> <ExpressionPrime>
	line 22: <Term> -> <Factor> <TermPrime>
	line 22: <Factor> -> <Primary>
	line 22: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: c               Line: 22
	line 22: <TermPrime> -> ε
	line 22: <ExpressionPrime> -> ε
Token: separator       Lexeme: )               Line: 22
	line 22: <Statement> -> <Compound>
	line 22: <Compound> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 22
	line 23: <StatementList> -> <Statement> <StatementListPrime>
	line 23: <Statement> -> <Assign>
	line 23: <Assign> -> IDENTIFIER = <Expression> ;
Token: identifier      Lexeme: max             Line: 23
Token: operator        Lexeme: =               Line: 24
	line 24: <Expression> -> <Term> <ExpressionPrime>
	line 24: <Term> -> <Factor> <TermPrime>
	line 24: <Factor> -> <Primary>
	line 24: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: b               Line: 24
	line 24: <TermPrime> -> ε
	line 24: <ExpressionPrime> -> ε
Token: separator       Lexeme: ;               Line: 24
	line 24: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 24
	line 25: <IfPrime> -> else <Statement> endif
Token: keyword         Lexeme: else            Line: 25
	line 26: <Statement> -> <Compound>
	line 26: <Compound> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 26
	line 27: <StatementList> -> <Statement> <StatementListPrime>
	line 27: <Statement> -> <Assign>
	line 27: <Assign> -> IDENTIFIER = <Expression> ;
Token: identifier      Lexeme: max             Line: 27
Token: operator        Lexeme: =               Line: 28
	line 28: <Expression> -> <Term> <ExpressionPrime>
	line 28: <Term> -> <Factor> <TermPrime>
	line 28: <Factor> -> <Primary>
	line 28: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: c               Line: 28
	line 28: <TermPrime> -> ε
	line 28: <ExpressionPrime> -> ε
Token: separator       Lexeme: ;               Line: 28
	line 28: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 28
Token: keyword         Lexeme: endif           Line: 29
	line 30: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 30
Token: keyword         Lexeme: endif           Line: 31
	line 32: <StatementListPrime> -> <Statement> <StatementListPrime>
	line 32: <Statement> -> <Return>
	line 32: <Return> -> return <ReturnPrime>
Token: keyword         Lexeme: return          Line: 32
	line 34: <ReturnPrime> -> <Expression> ;
	line 34: <Expression> -> <Term> <ExpressionPrime>
	line 34: <Term> -> <Factor> <TermPrime>
	line 34: <Factor> -> <Primary>
	line 34: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: max             Line: 34
	line 34: <TermPrime> -> ε
	line 34: <ExpressionPrime> -> ε
Token: separator       Lexeme: ;               Line: 34
	line 34: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 34
	line 35: <FunctionDefinitionsPrime> -> ε
Token: separator       Lexeme: $$              Line: 35
	line 36: <OptDeclarationList> -> <DeclarationList>
	line 36: <DeclarationList> -> <Declaration> ; <DeclarationListPrime>
	line 36: <Declaration> -> <Qualifier> <IDs>
	line 36: <Qualifier> -> integer | boolean | real
Token: keyword         Lexeme: integer         Line: 36
	line 37: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: x               Line: 37
	line 37: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 37
Token: identifier      Lexeme: y               Line: 37
	line 37: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 37
Token: identifier      Lexeme: z               Line: 37
	line 37: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 37
Token: identifier      Lexeme: maxNum          Line: 37
Token: separator       Lexeme: ;               Line: 37
	line 37: <DeclarationListPrime> -> ε
Token: separator       Lexeme: $$              Line: 37
	line 38: <StatementList> -> <Statement> <StatementListPrime>
	line 38: <Statement> -> <Scan>
	line 38: <Scan> -> scan ( <IDs> ) ;
Token: keyword         Lexeme: scan            Line: 38
Token: separator       Lexeme: (               Line: 39
	line 39: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: x               Line: 39
	line 39: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 39
Token: identifier      Lexeme: y               Line: 39
	line 39: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 39
Token: identifier      Lexeme: z               Line: 39
Token: separator       Lexeme: )               Line: 39
Token: separator       Lexeme: ;               Line: 39
	line 39: <StatementListPrime> -> <Statement> <StatementListPrime>
	line 39: <Statement> -> <Assign>
	line 39: <Assign> -> IDENTIFIER = <Expression> ;
Token: identifier      Lexeme: maxNum          Line: 39
Token: operator        Lexeme: =               Line: 41
	line 41: <Expression> -> <Term> <ExpressionPrime>
	line 41: <Term> -> <Factor> <TermPrime>
	line 41: <Factor> -> <Primary>
	line 41: <Primary> -> IDENTIFIER ( <IDs> )
Token: identifier      Lexeme: max_of_three    Line: 41
Token: separator       Lexeme: (               Line: 41
	line 41: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: x               Line: 41
	line 41: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 41
Token: identifier      Lexeme: y               Line: 41
	line 41: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 41
Token: identifier      Lexeme: z               Line: 41
Token: separator       Lexeme: )               Line: 41
	line 41: <TermPrime> -> ε
	line 41: <ExpressionPrime> -> ε
Token: separator       Lexeme: ;               Line: 41
	line 41: <StatementListPrime> -> <Statement> <StatementListPrime>
	line 41: <Statement> -> <Print>
	line 41: <Print> -> print ( <Expression> ) ;
Token: keyword         Lexeme: print           Line: 41
Token: separator       Lexeme: (               Line: 42
	line 42: <Expression> -> <Term> <ExpressionPrime>
	line 42: <Term> -> <Factor> <TermPrime>
	line 42: <Factor> -> <Primary>
	line 42: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: maxNum          Line: 42
	line 42: <TermPrime> -> ε
	line 42: <ExpressionPrime> -> ε
Token: separator       Lexeme: )               Line: 42
Token: separator       Lexeme: ;               Line: 42
	line 42: <StatementListPrime> -> <Statement> <StatementListPrime>
	line 42: <Statement> -> <If>
	line 42: <If> -> if ( <Condition> ) <Statement> <IfPrime>
Token: keyword         Lexeme: if              Line: 42
Token: separator       Lexeme: (               Line: 44
	line 44: <Condition> -> <Expression> <Relop> <Expression>
	line 44: <Expression> -> <Term> <ExpressionPrime>
	line 44: <Term> -> <Factor> <TermPrime>
	line 44: <Factor> -> <Primary>
	line 44: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: maxNum          Line: 44
	line 44: <TermPrime> -> ε
	line 44: <ExpressionPrime> -> ε
	line 44: <Relop> -> == | != | > | < | <= | =>
Token: operator        Lexeme: ==              Line: 44
	line 44: <Expression> -> <Term> <ExpressionPrime>
	line 44: <Term> -> <Factor> <TermPrime>
	line 44: <Factor> -> <Primary>
	line 44: <Primary> -> INTEGER
Token: integer         Lexeme: 0               Line: 44
	line 44: <TermPrime> -> ε
	line 44: <ExpressionPrime> -> ε
Token: separator       Lexeme: )               Line: 44
	line 44: <Statement> -> <Compound>
	line 44: <Compound> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 44
	line 45: <StatementList> -> <Statement> <StatementListPrime>
	line 45: <Statement> -> <Print>
	line 45: <Print> -> print ( <Expression> ) ;
Token: keyword         Lexeme: print           Line: 45
Token: separator       Lexeme: (               Line: 46
	line 46: <Expression> -> <Term> <ExpressionPrime>
	line 46: <Term> -> <Factor> <TermPrime>
	line 46: <Factor> -> <Primary>
	line 46: <Primary> -> true | false
Token: keyword         Lexeme: true            Line: 46
	line 46: <TermPrime> -> ε
	line 46: <ExpressionPrime> -> ε
Token: separator       Lexeme: )               Line: 46
Token: separator       Lexeme: ;               Line: 46
	line 46: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 46
	line 47: <IfPrime> -> else <Statement> endif
Token: keyword         Lexeme: else            Line: 47
	line 48: <Statement> -> <Compound>
	line 48: <Compound> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 48
	line 49: <StatementList> -> <Statement> <StatementListPrime>
	line 49: <Statement> -> <Print>
	line 49: <Print> -> print ( <Expression> ) ;
Token: keyword         Lexeme: print           Line: 49
Token: separator       Lexeme: (               Line: 50
	line 50: <Expression> -> <Term> <ExpressionPrime>
	line 50: <Term> -> <Factor> <TermPrime>
	line 50: <Factor> -> <Primary>
	line 50: <Primary> -> true | false
Token: keyword         Lexeme: false           Line: 50
	line 50: <TermPrime> -> ε
	line 50: <ExpressionPrime> -> ε
Token: separator       Lexeme: )               Line: 50
Token: separator       Lexeme: ;               Line: 50
	line 50: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 50
Token: keyword         Lexeme: endif           Line: 51
	line 52: <StatementListPrime> -> ε
Token: separator       Lexeme: $$              Line: 52
