Token           Lexeme         
-----------------------------------
Token: separator       Lexeme: $$              Line: 1
	line 1: <Rat25S> -> $$ <OptFunctionDefinitions> $$ <OptDeclarationList> $$ <StatementList> $$
	line 1: <OptFunctionDefinitions> -> ε
[syntax-error] line 1: at token 'integer' (keyword) — expected separator $$
Token: keyword         Lexeme: integer         Line: 1
	line 2: <OptDeclarationList> -> ε
[syntax-error] line 2: at token '@' (unknown) — expected separator $$
Token: unknown         Lexeme: @               Line: 2
	line 2: <StatementList> -> <Statement> <StatementListPrime>
	line 2: <Statement> -> <Assign>
	line 2: <Assign> -> IDENTIFIER = <Expression> ;
Token: identifier      Lexeme: bad             Line: 2
[syntax-error] line 2: at token '/' (operator) — expected operator =
Token: operator        Lexeme: /               Line: 2
	line 2: <Expression> -> <Term> <ExpressionPrime>
	line 2: <Term> -> <Factor> <TermPrime>
	line 2: <Factor> -> <Primary>
[syntax-error] line 2: at token '/' (operator) — invalid primary
Token: operator        Lexeme: /               Line: 2
	line 2: <TermPrime> -> ε
	line 2: <ExpressionPrime> -> ε
[syntax-error] line 2: at token '‘@’' (unknown) — expected separator ;
Token: unknown         Lexeme: ‘@’             Line: 2
	line 2: <StatementListPrime> -> <Statement> <StatementListPrime>
	line 2: <Statement> -> <Assign>
	line 2: <Assign> -> IDENTIFIER = <Expression> ;
Token: identifier      Lexeme: is              Line: 2
[syntax-error] line 2: at token 'not' (identifier) — expected operator =
Token: identifier      Lexeme: not             Line: 2
	line 2: <Expression> -> <Term> <ExpressionPrime>
	line 2: <Term> -> <Factor> <TermPrime>
	line 2: <Factor> -> <Primary>
	line 2: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: in              Line: 2
	line 2: <TermPrime> -> ε
	line 2: <ExpressionPrime> -> ε
[syntax-error] line 2: at token 'the' (identifier) — expected separator ;
Token: identifier      Lexeme: the             Line: 2
	line 2: <StatementListPrime> -> <Statement> <StatementListPrime>
	line 2: <Statement> -> <Assign>
	line 2: <Assign> -> IDENTIFIER = <Expression> ;
Token: identifier      Lexeme: language        Line: 2
[syntax-error] line 2: at token '$$' (separator) — expected operator =
Token: separator       Lexeme: $$              Line: 2
	line 3: <Expression> -> <Term> <ExpressionPrime>
	line 3: <Term> -> <Factor> <TermPrime>
	line 3: <Factor> -> <Primary>
[syntax-error] line 3: at token '$$' (separator) — invalid primary
Token: separator       Lexeme: $$              Line: 3
	line 4: <TermPrime> -> ε
	line 4: <ExpressionPrime> -> ε
[syntax-error] line 4: at token '' (eof) — expected separator ;
	line 4: <StatementListPrime> -> ε
[syntax-error] line 4: at token '' (eof) — expected separator $$
