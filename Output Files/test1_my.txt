Token           Lexeme         
-----------------------------------
Token: separator       Lexeme: $$              Line: 1
	line 1: <Rat25S> -> $$ <OptFunctionDefinitions> $$ <OptDeclarationList> $$ <StatementList> $$
	line 1: <OptFunctionDefinitions> -> <FunctionDefinitions>
	line 1: <FunctionDefinitions> -> <Function> <FunctionDefinitionsPrime>
	line 1: <Function> -> function IDENTIFIER ( <OptParameterList> ) <OptDeclarationList> <Body>
Token: keyword         Lexeme: function        Line: 1
Token: identifier      Lexeme: add             Line: 2
Token: separator       Lexeme: (               Line: 2
	line 2: <OptParameterList> -> <ParameterList>
	line 2: <ParameterList> -> <Parameter> <ParameterListPrime>
	line 2: <Parameter> -> <IDs> <Qualifier>
	line 2: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: a               Line: 2
	line 2: <IDsPrime> -> ε
	line 2: <Qualifier> -> integer | boolean | real
Token: keyword         Lexeme: integer         Line: 2
	line 2: <ParameterListPrime> -> , <Parameter> <ParameterListPrime>
Token: separator       Lexeme: ,               Line: 2
	line 2: <Parameter> -> <IDs> <Qualifier>
	line 2: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: b               Line: 2
	line 2: <IDsPrime> -> ε
	line 2: <Qualifier> -> integer | boolean | real
Token: keyword         Lexeme: integer         Line: 2
Token: separator       Lexeme: )               Line: 2
	line 2: <OptDeclarationList> -> ε
	line 2: <Body> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 2
	line 2: <StatementList> -> <Statement> <StatementListPrime>
	line 2: <Statement> -> <Return>
	line 2: <Return> -> return <ReturnPrime>
Token: keyword         Lexeme: return          Line: 2
	line 3: <ReturnPrime> -> <Expression> ;
	line 3: <Expression> -> <Term> <ExpressionPrime>
	line 3: <Term> -> <Factor> <TermPrime>
	line 3: <Factor> -> <Primary>
	line 3: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: a               Line: 3
	line 3: <TermPrime> -> ε
	line 3: <ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime>
Token: operator        Lexeme: +               Line: 3
	line 3: <Term> -> <Factor> <TermPrime>
	line 3: <Factor> -> <Primary>
	line 3: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: b               Line: 3
	line 3: <TermPrime> -> ε
	line 3: <ExpressionPrime> -> ε
Token: separator       Lexeme: ;               Line: 3
	line 3: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 3
	line 4: <FunctionDefinitionsPrime> -> <FunctionDefinitions>
	line 4: <FunctionDefinitions> -> <Function> <FunctionDefinitionsPrime>
	line 4: <Function> -> function IDENTIFIER ( <OptParameterList> ) <OptDeclarationList> <Body>
Token: keyword         Lexeme: function        Line: 4
Token: identifier      Lexeme: hi              Line: 5
Token: separator       Lexeme: (               Line: 5
	line 5: <OptParameterList> -> ε
Token: separator       Lexeme: )               Line: 5
	line 5: <OptDeclarationList> -> ε
	line 5: <Body> -> { <StatementList> }
Token: separator       Lexeme: {               Line: 5
	line 5: <StatementList> -> <Statement> <StatementListPrime>
	line 5: <Statement> -> <Return>
	line 5: <Return> -> return <ReturnPrime>
Token: keyword         Lexeme: return          Line: 5
	line 6: <ReturnPrime> -> <Expression> ;
	line 6: <Expression> -> <Term> <ExpressionPrime>
	line 6: <Term> -> <Factor> <TermPrime>
	line 6: <Factor> -> <Primary>
	line 6: <Primary> -> INTEGER
Token: integer         Lexeme: 5               Line: 6
	line 6: <TermPrime> -> ε
	line 6: <ExpressionPrime> -> ε
Token: separator       Lexeme: ;               Line: 6
	line 6: <StatementListPrime> -> ε
Token: separator       Lexeme: }               Line: 6
	line 7: <FunctionDefinitionsPrime> -> ε
Token: separator       Lexeme: $$              Line: 7
	line 8: <OptDeclarationList> -> <DeclarationList>
	line 8: <DeclarationList> -> <Declaration> ; <DeclarationListPrime>
	line 8: <Declaration> -> <Qualifier> <IDs>
	line 8: <Qualifier> -> integer | boolean | real
Token: keyword         Lexeme: integer         Line: 8
	line 9: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: x               Line: 9
	line 9: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 9
Token: identifier      Lexeme: y               Line: 9
	line 9: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 9
Token: identifier      Lexeme: result          Line: 9
Token: separator       Lexeme: ;               Line: 9
	line 9: <DeclarationListPrime> -> ε
Token: separator       Lexeme: $$              Line: 9
	line 10: <StatementList> -> <Statement> <StatementListPrime>
	line 10: <Statement> -> <Scan>
	line 10: <Scan> -> scan ( <IDs> ) ;
Token: keyword         Lexeme: scan            Line: 10
Token: separator       Lexeme: (               Line: 11
	line 11: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: x               Line: 11
	line 11: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 11
Token: identifier      Lexeme: y               Line: 11
Token: separator       Lexeme: )               Line: 11
Token: separator       Lexeme: ;               Line: 11
	line 11: <StatementListPrime> -> <Statement> <StatementListPrime>
	line 11: <Statement> -> <Assign>
	line 11: <Assign> -> IDENTIFIER = <Expression> ;
Token: identifier      Lexeme: result          Line: 11
Token: operator        Lexeme: =               Line: 12
	line 12: <Expression> -> <Term> <ExpressionPrime>
	line 12: <Term> -> <Factor> <TermPrime>
	line 12: <Factor> -> <Primary>
	line 12: <Primary> -> IDENTIFIER ( <IDs> )
Token: identifier      Lexeme: add             Line: 12
Token: separator       Lexeme: (               Line: 12
	line 12: <IDs> -> IDENTIFIER <IDsPrime>
Token: identifier      Lexeme: x               Line: 12
	line 12: <IDsPrime> -> , IDENTIFIER <IDsPrime>
Token: separator       Lexeme: ,               Line: 12
Token: identifier      Lexeme: y               Line: 12
Token: separator       Lexeme: )               Line: 12
	line 12: <TermPrime> -> ε
	line 12: <ExpressionPrime> -> ε
Token: separator       Lexeme: ;               Line: 12
	line 12: <StatementListPrime> -> <Statement> <StatementListPrime>
	line 12: <Statement> -> <Print>
	line 12: <Print> -> print ( <Expression> ) ;
Token: keyword         Lexeme: print           Line: 12
Token: separator       Lexeme: (               Line: 13
	line 13: <Expression> -> <Term> <ExpressionPrime>
	line 13: <Term> -> <Factor> <TermPrime>
	line 13: <Factor> -> <Primary>
	line 13: <Primary> -> IDENTIFIER
Token: identifier      Lexeme: result          Line: 13
	line 13: <TermPrime> -> ε
	line 13: <ExpressionPrime> -> ε
Token: separator       Lexeme: )               Line: 13
Token: separator       Lexeme: ;               Line: 13
	line 13: <StatementListPrime> -> ε
Token: separator       Lexeme: $$              Line: 13
